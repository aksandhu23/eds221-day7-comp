---
title: "Joins and strings and dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(lubridate)
```

## Joins

### Full Join

### Left Join

### Inner Join

### Semi Join

### Anti Join

```{r}
animals <-
  tibble::tribble(
    ~`location	species	maturity`,
         "lagoon\tbobcat\tadult",
       "bluff\tcoyote\tjuvenile",
             "creek\tfox\tadult",
      "oaks\tsquirrel\tjuvenile",
          "bluff\tbobcat\tadult",
                             "È€"
    )
 sites <- tibble::tribble(
            ~location,      ~full_site_name, ~jurisdiction,
              "beach",       "Goleta Beach",     "SB City",
             "lagoon",        "UCSB Lagoon",        "UCSB",
              "bluff",       "Ellwood Mesa",     "SB City",
               "oaks", "Fremont Campground",        "USFS"
            )
animals_2 <- tibble::tribble(
               ~location,   ~species,  ~maturity,
                "lagoon",   "bobcat",    "adult",
                 "bluff",   "coyote", "juvenile",
                 "creek",      "fox",    "adult",
                  "oaks", "squirrel", "juvenile",
                 "bluff",   "bobcat",    "adult"
               )

```

Full Join

```{r}

# The by = tells the table what the matching key variable is 

full_join_example <- full_join(animals_2, sites, by = "location")
```

Left Join

```{r}
left_join_example <- left_join(animals_2, sites, by = "location")
```

Inner Join

```{r}
inner_join_example <- inner_join(animals_2, sites, by = "location")
```

```{r}
# replace locatation vaiable

sites_2 <- sites|>
  rename(loc = location)
```

```{r}
nonmatching <- full_join(animals_2, sites_2, by = c("location" = "loc"))
```

Semi Join

```{r}
semi_join_example <- semi_join(animals_2, sites)
```

Anti Join

```{r}
anti_join_example <- anti_join(animals_2, sites)
```

## Date with lubridate

```{r}
my_date <- "03-15-1998"
class(my_date)

# mdy, ymd, dmy

lubridate::mdy(my_date)


my_date2 <- "11/7/2003"
lubridate::dmy(my_date2)

my_date3 <- "08-Jun-1974"
lubridate::dmy(my_date3)

my_date4 <- "19610518"
lubridate::ymd(my_date4)
my_real_date <- lubridate::ymd(my_date4)
class(my_real_date)
```

Breaking the date

```{r}
# lubridate::mdy("1942-08-30") would break 
lubridate::ymd("1942-08-30")

# lubridate::dmy("09/22/84")
lubridate::mdy("09/22/84")
```

```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)

class(time)
```

```{r}
# Change time zone

with_tz(time, "America/Los_Angeles")

with_tz(time, "Europe/London")

with_tz(time, "America/New_York")

with_tz(time, "Asia/Jakarta")

my_time <- lubridate::ymd_hms(time)

year(my_time)

day(my_time)

hour(my_time)

minute(my_time)

second(my_time)
```

```{r}
teddy_bday <- lubridate::ymd("20170615")

# What is the day of the week
wday(teddy_bday, label = TRUE)
week(teddy_bday)

my_bday <-lubridate::mdy(04231994)
wday(my_bday, label = TRUE)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm, 
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48, 
  "11/17/2020", "red", 67
  
)


urchin_ymd <- urchin_counts|>
  mutate(date = mdy(date)) |>
  mutate(year = year(date),
         month = month(date),
         day = day(date)) 


class(urchin_ymd$date)
```

```{r}
day_1 <- ymd("2020-01-06")

day_2 <- ymd("2020-05-18")

# Creating a time interval

time_interval <- interval(day_1, day_2)

time_length(time_interval, "year")
```

```{r}
my_string <- "Teddy loves eating salmon and socks."

my_string|>
  str_detect("love")

my_string |> 
  str_detect("pup")

my_string2 <- c("burrito", "fish taco", "taco salad")

my_string2 |>
  str_detect("fish")
```

```{r}
# looking at starwars. find rows where skywalker exists

skywalkers <- starwars |>
  filter(str_detect(name, pattern = "Skywalker"))

mauls <- starwars |>
  filter(str_detect(name, pattern = "Maul"))
```

## Create a subset that keeps rows where "blue" in the eye color

```{r}
blue_eyes <- starwars |>
  filter(str_detect(eye_color, pattern = "blue"))
```

## str_replace to replace string patterns 

```{r}
firewalkers <- starwars |>
  mutate(name_2 = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

```{r}
## Remove the white space in the string

feedback <- c("  I ate  some   nachos", "Wednesday  morning ")

str_trim(feedback)
str_squish(feedback)

# str_to* making things lower case, upper case, sentence case, etc

str_to_lower(feedback)
str_to_sentence(feedback)
```

```{r}
# From star wars, create a new data frame starwars_lc that adds a new column called name_lower containing character names converted to all lowercase. 

starwars_lc <- starwars |>
  mutate(name_lower = str_to_lower(name))
```

### case_when()

```{r}
sw_robot <- starwars |>
  mutate(robot_status = case_when(
    species == "Droid" ~ "A ROBOT!!!",
    species == "Human" ~ "It's a human!",
    TRUE ~ "This is something else."
  )) 
```
